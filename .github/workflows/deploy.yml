name: Deploy

on:
  workflow_dispatch:

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read  # This is required for actions/checkout

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      DIGITAL_NPM_TOKEN: ${{ secrets.DIGITAL_NPM_TOKEN }}
      SPIN_NPM_TOKEN: ${{ secrets.SPIN_NPM_TOKEN }}
    steps:
      - name: ðŸ”‘ Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_ROLE }}
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Enable CorePack
        run: corepack enable

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v4
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: yarn-${{ hashFiles('yarn.lock') }}
          restore-keys: yarn-${{ hashFiles('yarn.lock') }}

      - name: ðŸ“¦ Install Dependencies
        if: ${{ steps.yarn-cache.outputs.cache-hit != 'true' }}
        run: yarn install --immutable

      - name: ðŸ“¦ Install Dependencies from Cache
        if: ${{ steps.yarn-cache.outputs.cache-hit == 'true' }}
        run: yarn add --cached

      - name: Get Current Host App version
        run: |
          echo "HOST_APP_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV

      - name: Create host manifest
        run: |
          mkdir -p ./version-manager
          echo '{ "host": { "versions": [], "last": "" } }' > ./version-manager/manifest.json
          echo '{ "containers": {} }' > ./version-manager/containers.json

      - name: Download host manifest from s3
        id: download-host-manifest
        run: |
          aws s3 cp s3://${{ vars.S3_BUCKET_NAME }}/${{ vars.S3_MICRO_APP_FOLDER }}/manifest.json ./version-manager/manifest.json
        continue-on-error: true

      - name: Get last host version uploaded
        if: steps.download-host-manifest.outcome == 'success'
        run: |
          echo "LAST_HOST_VERSION=$(node -p "require('./version-manager/manifest.json').host.last")" >> $GITHUB_ENV

      - name: Download last compatible container from s3
        if: steps.download-host-manifest.outcome == 'success'
        run: |
          aws s3 cp s3://${{ vars.S3_BUCKET_NAME }}/${{ vars.S3_MICRO_APP_FOLDER }}/$LAST_HOST_VERSION/containers.json ./version-manager/containers.json

      - name: Update manifest.json
        run: node scripts/update-manifest.js

      - name: Upload host manifest updated to s3
        run: |
          aws s3 cp ./version-manager/manifest.json s3://${{ vars.S3_BUCKET_NAME }}/${{ vars.S3_MICRO_APP_FOLDER }}/manifest.json

      - name: Upload host containers to s3
        run: |
          aws s3 cp ./version-manager/containers.json s3://${{ vars.S3_BUCKET_NAME }}/${{ vars.S3_MICRO_APP_FOLDER }}/$HOST_APP_VERSION/containers.json
